---
import { useEffect } from 'react';

let images = Object.values(
  import.meta.glob('/src/images/scatter/*.{png,jpg,jpeg}', { eager: true })
);

// Extract URLs from img directory
let imageURLs = images.map((mod: any) =>
  typeof mod.default === 'object' && mod.default.src ? mod.default.src : mod.default
);

// Shuffle input
let shuffleArray = (arr: any[]) => arr.sort(() => Math.random() - 0.5);

// Subset input (at least 80% of images)
let minImages = Math.ceil(imageURLs.length * 0.8);
let maxImages = imageURLs.length;
let numImagesToUse = Math.floor(Math.random() * (maxImages - minImages + 1)) + minImages;

let selectedImageURLs = shuffleArray(imageURLs).slice(0, numImagesToUse);
---

<style>
  .scatter-container {
    position: fixed;
    width: 100vw;
    height: 50vh;
    left: 0;
    /* margin: 5vw; */
    z-index: -1;
    overflow: auto;
  }

  .scatter-container img {
    transition: transform 0.5s ease-in-out, opacity 0.3s ease-in-out;
    cursor: pointer;
  }
</style>

<!-- Pass selected image URLs into a data attribute -->
<div
  class="scatter-container"
  id="super-container"
  data-filenames={JSON.stringify(selectedImageURLs)}
></div>

<script>
  let accumulatedScroll = 0;
  let scrollThreshold = window.innerHeight * 0.2; // Recalculate after every ~75vh scrolled

  /**
   * @param {number} min - Minimum value.
   * @param {number} max - Maximum value.
   * @returns {number} A random number within the range.
   */
  function randomBetween(min, max) {
    return Math.random() * (max - min) + min;
  }

  /**
   * Clears existing images from the container to prevent duplicates.
   * @param {HTMLElement} container - The container element.
   */
  function clearImages(container) {
    while (container.firstChild) {
      container.removeChild(container.firstChild);
    }
  }

  /**
   * Noisy square packing with repositioning.
   * @param {string} containerId - The id of the container element.
   * @param {string[]} filenames - An array of image URLs.
   */
  function placeImagesWithNoise(containerId, filenames) {
    let container = document.getElementById(containerId);
    if (!container) {
      console.error(`Container with id ${containerId} not found`);
      return;
    }

    // Remove previous images before recalculating positions
    clearImages(container);

    let containerRect = container.getBoundingClientRect();
    let totalImages = filenames.length;
    if (totalImages === 0) return;

    let rows = Math.ceil(Math.sqrt(totalImages));
    let cols = Math.ceil(totalImages / rows);

    // Calculate base img size
    let imgWidth = Math.floor(containerRect.width / cols);
    let imgHeight = Math.floor(containerRect.height / rows);
    let baseSize = Math.min(imgWidth, imgHeight) * 0.85;

    filenames.forEach((filename, index) => {
      let img = document.createElement('img');
      img.src = filename;
      img.style.width = `${baseSize}px`;
      img.style.height = `${baseSize}px`;
      img.style.visibility = 'hidden';

      img.addEventListener('load', () => {
        let row = Math.floor(index / cols);
        let col = index % cols;

        let baseLeft = col * imgWidth;
        let baseTop = row * imgHeight;

        // Apply controlled random spread
        let jitterX = randomBetween(-imgWidth * 0.3, imgWidth * 0.3);
        let jitterY = randomBetween(-imgHeight * 0.3, imgHeight * 0.3);
        
        // Displacement within bounds
        let finalLeft = Math.min(Math.max(baseLeft + jitterX, 0), containerRect.width - baseSize);
        let finalTop = Math.min(Math.max(baseTop + jitterY, 0), containerRect.height - baseSize);

        // Random scale
        let scale = randomBetween(0.9, 1.1);

        // Random rotation
        let rotation = randomBetween(-10, 10);

        img.style.transform = `translate(${finalLeft}px, ${finalTop}px) scale(${scale}) rotate(${rotation}deg)`;
        img.style.visibility = 'visible';

        container.appendChild(img);
      });
    });
  }

  /**
   * Handles scrolling and triggers repositioning after scrolling a threshold distance.
   */
  function handleScroll() {
    console.log("handleScroll() triggered");

    accumulatedScroll += Math.abs(window.scrollY - accumulatedScroll);
    console.log(`Accumulated Scroll: ${accumulatedScroll}, Threshold: ${scrollThreshold}`);

    if (accumulatedScroll >= scrollThreshold) {
      accumulatedScroll = 0; // Reset counter after re-triggering
      console.log("Repositioning images!");

      let container = document.getElementById('super-container');
      let filenames = JSON.parse(container.getAttribute('data-filenames'));
      placeImagesWithNoise('super-container', filenames);
    }
  }

  // Initial placement
  window.addEventListener('DOMContentLoaded', () => {
    let container = document.getElementById('super-container');
    let filenames = JSON.parse(container.getAttribute('data-filenames'));
    placeImagesWithNoise('super-container', filenames);
  });

  // Scroll listener
  // window.addEventListener('scroll', handleScroll);
  // window.addEventListener('scroll', () => console.log('Scroll event triggered'));
  // window.addEventListener('scroll', () => {
  //   console.log(`Scroll position: ${window.scrollY}`);
  // });
  // window.addEventListener('scroll', () => {
  //   console.log(`Accumulated scroll: ${accumulatedScroll}`);
  // });
</script>
