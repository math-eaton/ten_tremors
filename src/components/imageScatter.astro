---
const images = Object.values(
  import.meta.glob('/src/images/scatter/*.{png,jpg,jpeg}', { eager: true })
);

// extract URLs from img directory
const imageURLs = images.map((mod) =>
  typeof mod.default === 'object' && mod.default.src ? mod.default.src : mod.default
);

// shuffle input
const shuffleArray = (arr) => arr.sort(() => Math.random() - 0.5);

// subset input (at least 80% of images)
const minImages = Math.ceil(imageURLs.length * 0.8);
const maxImages = imageURLs.length;
const numImagesToUse = Math.floor(Math.random() * (maxImages - minImages + 1)) + minImages;

const selectedImageURLs = shuffleArray(imageURLs).slice(0, numImagesToUse);
---

<style>
  .scatter-container {
    position: fixed;
    width: 100vw;
    height: 50vh;
    left: 0;
    margin: 5vw;
    z-index: -1;
  }

  .scatter-container img {
    transition: transform 0.5s ease, opacity 0.3s ease;
    cursor: pointer;
  }
</style>

<!-- Pass selected image URLs into a data attribute -->
<div
  class="scatter-container"
  id="super-container"
  data-filenames={JSON.stringify(selectedImageURLs)}
></div>

<script>
  /**
   * @param {number} min - Minimum value.
   * @param {number} max - Maximum value.
   * @returns {number} A random number within the range.
   */
  function randomBetween(min, max) {
    return Math.random() * (max - min) + min;
  }

  /**
   * noisy square packing
   * @param {string} containerId - The id of the container element.
   * @param {string[]} filenames - An array of image URLs.
   */
  function placeImagesWithNoise(containerId, filenames) {
    const container = document.getElementById(containerId);
    if (!container) {
      console.error(`Container with id ${containerId} not found`);
      return;
    }
    const containerRect = container.getBoundingClientRect();

    const totalImages = filenames.length;
    if (totalImages === 0) return;

    const rows = Math.ceil(Math.sqrt(totalImages));
    const cols = Math.ceil(totalImages / rows);

    // calc base img size
    const imgWidth = Math.floor(containerRect.width / cols);
    const imgHeight = Math.floor(containerRect.height / rows);
    const baseSize = Math.min(imgWidth, imgHeight) * 0.85;

    filenames.forEach((filename, index) => {
      const img = document.createElement('img');
      img.src = filename;
      img.style.width = `${baseSize}px`;
      img.style.height = `${baseSize}px`;
      img.style.visibility = 'hidden';

      img.addEventListener('load', () => {
        const row = Math.floor(index / cols);
        const col = index % cols;

        let baseLeft = col * imgWidth;
        let baseTop = row * imgHeight;

        // calc spread
        const jitterX = randomBetween(-imgWidth * 0.3, imgWidth * 0.3);
        const jitterY = randomBetween(-imgHeight * 0.3, imgHeight * 0.3);
        
        // displace
        let finalLeft = Math.min(Math.max(baseLeft + jitterX, 0), containerRect.width - baseSize);
        let finalTop = Math.min(Math.max(baseTop + jitterY, 0), containerRect.height - baseSize);

        // scale
        const scale = randomBetween(0.9, 1.1);

        // rotation in degrees
        const rotation = randomBetween(-10, 10);

        img.style.transform = `translate(${finalLeft}px, ${finalTop}px) scale(${scale}) rotate(${rotation}deg)`;
        img.style.visibility = 'visible';

        container.appendChild(img);
      });
    });
  }

  window.addEventListener('DOMContentLoaded', () => {
    const container = document.getElementById('super-container');
    const filenames = JSON.parse(container.getAttribute('data-filenames'));
    placeImagesWithNoise('super-container', filenames);
  });
</script>
